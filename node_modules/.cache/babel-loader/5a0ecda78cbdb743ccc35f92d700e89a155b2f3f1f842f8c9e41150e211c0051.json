{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nconst useForecast = () => {\n  _s();\n  const [term, setTerm] = useState(\"\");\n  const [city, setCity] = useState(null);\n  const [option, setOption] = useState([]);\n  const [forecast, setForecast] = useState(null);\n  //\n  //\n  const getSearchOption = value => {\n    fetch(`http://api.openweathermap.org/geo/1.0/direct?q=${value.trim()}&limit=5&appid=f281ad23c454d69d7b050e565c983d52`).then(res => res.json()).then(data => setOption(data));\n  };\n\n  //\n  // e is an inplicit type, tell to the code that is expentig something\n  const onChangeInput = e => {\n    const value = e.target.value.trim();\n    setTerm(value);\n    if (value === \"\") return;\n    getSearchOption(value);\n  };\n  //\n  //\n  const getForecast = city => {\n    fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${city.lat}&lon=${city.lon}&unit=metric&appid=f281ad23c454d69d7b050e565c983d52`).then(res => res.json()).then(data => {\n      const forecastData = {\n        ...data.city,\n        list: data.list.slice(0, 16)\n      };\n      setForecast(forecastData);\n    }).catch(e => console.log(e));\n  };\n\n  //\n  //\n  const onSubmit = () => {\n    if (!city) return;\n    getForecast(city);\n  };\n  const optionSelect = item => {\n    setCity(item);\n  };\n  //\n  //use effect reset the search, but will use the city selected as the new state\n  useEffect(() => {\n    if (city) {\n      setTerm(city.name);\n      setOption([]);\n    }\n  }, [city]);\n  return {\n    term,\n    option,\n    forecast,\n    onChangeInput,\n    optionSelect,\n    onSubmit\n  };\n};\n_s(useForecast, \"jj2ZySv9gGSTnP7VwnmpVqh5eAs=\");\nexport default useForecast;","map":{"version":3,"names":["useState","useEffect","useForecast","_s","term","setTerm","city","setCity","option","setOption","forecast","setForecast","getSearchOption","value","fetch","trim","then","res","json","data","onChangeInput","e","target","getForecast","lat","lon","forecastData","list","slice","catch","console","log","onSubmit","optionSelect","item","name"],"sources":["/Users/lucacaimi/Desktop/weather_app_typescript/src/components/hoocks/useForecast.ts"],"sourcesContent":["import { useState, useEffect, ChangeEvent } from \"react\";\nimport { forecastType, optionType } from \"../Icons/types/index\";\n\nconst useForecast = () => {\n  const [term, setTerm] = useState<string>(\"\");\n  const [city, setCity] = useState<optionType | null>(null);\n  const [option, setOption] = useState<[]>([]);\n  const [forecast, setForecast] = useState<forecastType | null>(null);\n  //\n  //\n  const getSearchOption = (value: string) => {\n    fetch(\n      `http://api.openweathermap.org/geo/1.0/direct?q=${value.trim()}&limit=5&appid=f281ad23c454d69d7b050e565c983d52`\n    )\n      .then((res) => res.json())\n      .then((data) => setOption(data));\n  };\n\n  //\n  // e is an inplicit type, tell to the code that is expentig something\n  const onChangeInput = (e: ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.trim();\n    setTerm(value);\n\n    if (value === \"\") return;\n\n    getSearchOption(value);\n  };\n  //\n  //\n  const getForecast = (city: optionType) => {\n    fetch(\n      `https://api.openweathermap.org/data/2.5/forecast?lat=${city.lat}&lon=${city.lon}&unit=metric&appid=f281ad23c454d69d7b050e565c983d52`\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        const forecastData = {\n          ...data.city,\n          list: data.list.slice(0, 16),\n        };\n        setForecast(forecastData);\n      })\n      .catch((e) => console.log(e));\n  };\n\n  //\n  //\n  const onSubmit = () => {\n    if (!city) return;\n\n    getForecast(city);\n  };\n\n  const optionSelect = (item: optionType) => {\n    setCity(item);\n  };\n  //\n  //use effect reset the search, but will use the city selected as the new state\n  useEffect(() => {\n    if (city) {\n      setTerm(city.name);\n      setOption([]);\n    }\n  }, [city]);\n  return {\n    term,\n    option,\n    forecast,\n    onChangeInput,\n    optionSelect,\n    onSubmit,\n  };\n};\n\nexport default useForecast;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAqB,OAAO;AAGxD,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAS,EAAE,CAAC;EAC5C,MAAM,CAACM,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAoB,IAAI,CAAC;EACzD,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAK,EAAE,CAAC;EAC5C,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAsB,IAAI,CAAC;EACnE;EACA;EACA,MAAMY,eAAe,GAAIC,KAAa,IAAK;IACzCC,KAAK,CACF,kDAAiDD,KAAK,CAACE,IAAI,CAAC,CAAE,iDACjE,CAAC,CACEC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAKV,SAAS,CAACU,IAAI,CAAC,CAAC;EACpC,CAAC;;EAED;EACA;EACA,MAAMC,aAAa,GAAIC,CAAgC,IAAK;IAC1D,MAAMR,KAAK,GAAGQ,CAAC,CAACC,MAAM,CAACT,KAAK,CAACE,IAAI,CAAC,CAAC;IACnCV,OAAO,CAACQ,KAAK,CAAC;IAEd,IAAIA,KAAK,KAAK,EAAE,EAAE;IAElBD,eAAe,CAACC,KAAK,CAAC;EACxB,CAAC;EACD;EACA;EACA,MAAMU,WAAW,GAAIjB,IAAgB,IAAK;IACxCQ,KAAK,CACF,wDAAuDR,IAAI,CAACkB,GAAI,QAAOlB,IAAI,CAACmB,GAAI,qDACnF,CAAC,CACET,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAK;MACd,MAAMO,YAAY,GAAG;QACnB,GAAGP,IAAI,CAACb,IAAI;QACZqB,IAAI,EAAER,IAAI,CAACQ,IAAI,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE;MAC7B,CAAC;MACDjB,WAAW,CAACe,YAAY,CAAC;IAC3B,CAAC,CAAC,CACDG,KAAK,CAAER,CAAC,IAAKS,OAAO,CAACC,GAAG,CAACV,CAAC,CAAC,CAAC;EACjC,CAAC;;EAED;EACA;EACA,MAAMW,QAAQ,GAAGA,CAAA,KAAM;IACrB,IAAI,CAAC1B,IAAI,EAAE;IAEXiB,WAAW,CAACjB,IAAI,CAAC;EACnB,CAAC;EAED,MAAM2B,YAAY,GAAIC,IAAgB,IAAK;IACzC3B,OAAO,CAAC2B,IAAI,CAAC;EACf,CAAC;EACD;EACA;EACAjC,SAAS,CAAC,MAAM;IACd,IAAIK,IAAI,EAAE;MACRD,OAAO,CAACC,IAAI,CAAC6B,IAAI,CAAC;MAClB1B,SAAS,CAAC,EAAE,CAAC;IACf;EACF,CAAC,EAAE,CAACH,IAAI,CAAC,CAAC;EACV,OAAO;IACLF,IAAI;IACJI,MAAM;IACNE,QAAQ;IACRU,aAAa;IACba,YAAY;IACZD;EACF,CAAC;AACH,CAAC;AAAC7B,EAAA,CArEID,WAAW;AAuEjB,eAAeA,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}